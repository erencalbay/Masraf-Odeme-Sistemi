// <auto-generated />
using System;
using Data.DbContextCon;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(VdDbContext))]
    [Migration("20240121120637_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entity.Demand", b =>
                {
                    b.Property<int>("DemandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DemandId"));

                    b.Property<int>("DemandNumber")
                        .HasColumnType("integer");

                    b.Property<int>("DemandResponseType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertUserNumber")
                        .HasColumnType("integer");

                    b.Property<string>("RejectionResponse")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdateUserNumber")
                        .HasColumnType("integer");

                    b.Property<int>("UserNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("DemandId");

                    b.HasIndex("DemandId")
                        .IsUnique();

                    b.HasIndex("UserNumber");

                    b.ToTable("Demand");
                });

            modelBuilder.Entity("Data.Entity.Info", b =>
                {
                    b.Property<int>("InfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InfoId"));

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("InfoNumber")
                        .HasColumnType("integer");

                    b.Property<string>("InfoType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertUserNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdateUserNumber")
                        .HasColumnType("integer");

                    b.Property<int>("UserNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("isDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("InfoId");

                    b.HasIndex("InfoId")
                        .IsUnique();

                    b.HasIndex("UserNumber");

                    b.HasIndex("Information", "InfoType", "InfoNumber")
                        .IsUnique();

                    b.ToTable("Info");
                });

            modelBuilder.Entity("Data.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "employee"
                        });
                });

            modelBuilder.Entity("Data.Entity.RoleUser", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserNumber")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "UserNumber");

                    b.HasIndex("UserNumber");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("Data.Entity.UserRefreshToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("WebAPI.Entity.User", b =>
                {
                    b.Property<int>("UserNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("False");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertUserNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdateUserNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("UserNumber");

                    b.HasIndex("IdentityNumber")
                        .IsUnique();

                    b.HasIndex("UserNumber")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserNumber = 445566,
                            DateOfBirth = new DateTime(2004, 1, 21, 12, 6, 36, 918, DateTimeKind.Utc).AddTicks(3480),
                            Email = "erencalbay@gmail.com",
                            FirstName = "Eren",
                            IdentityNumber = "44332211002",
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserNumber = 0,
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Çalbay",
                            isActive = false
                        },
                        new
                        {
                            UserNumber = 112233,
                            DateOfBirth = new DateTime(2009, 1, 21, 12, 6, 36, 918, DateTimeKind.Utc).AddTicks(3493),
                            Email = "ahmetkızılkaya@gmail.com",
                            FirstName = "Ahmet",
                            IdentityNumber = "34332211002",
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserNumber = 0,
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Kızılkaya",
                            isActive = false
                        });
                });

            modelBuilder.Entity("Data.Entity.Demand", b =>
                {
                    b.HasOne("WebAPI.Entity.User", "User")
                        .WithMany("Demands")
                        .HasForeignKey("UserNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entity.Info", b =>
                {
                    b.HasOne("WebAPI.Entity.User", "User")
                        .WithMany("Infos")
                        .HasForeignKey("UserNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entity.RoleUser", b =>
                {
                    b.HasOne("Data.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entity.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entity.UserRefreshToken", b =>
                {
                    b.HasOne("WebAPI.Entity.User", "User")
                        .WithOne("UserRefreshToken")
                        .HasForeignKey("Data.Entity.UserRefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebAPI.Entity.User", b =>
                {
                    b.Navigation("Demands");

                    b.Navigation("Infos");

                    b.Navigation("Roles");

                    b.Navigation("UserRefreshToken")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
